// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package rest

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// BirthDate Дата рождения
type BirthDate = openapi_types.Date

// DialogMessage defines model for DialogMessage.
type DialogMessage struct {
	// From Идентификатор пользователя
	From UserId `json:"from"`

	// Text Текст сообщения
	Text DialogMessageText `json:"text"`

	// To Идентификатор пользователя
	To UserId `json:"to"`
}

// DialogMessageText Текст сообщения
type DialogMessageText = string

// Post Пост пользователя
type Post struct {
	// AuthorUserId Идентификатор пользователя
	AuthorUserId *UserId `json:"author_user_id,omitempty"`

	// Id Идентификатор поста
	Id *PostId `json:"id,omitempty"`

	// Text Текст поста
	Text *PostText `json:"text,omitempty"`
}

// PostId Идентификатор поста
type PostId = string

// PostText Текст поста
type PostText = string

// User defines model for User.
type User struct {
	// Age Возраст
	Age int `json:"age"`

	// Biography Интересы
	Biography string `json:"biography"`

	// City Город
	City string `json:"city"`

	// FirstName Имя
	FirstName string `json:"first_name"`

	// Id Идентификатор пользователя
	Id UserId `json:"id"`

	// SecondName Фамилия
	SecondName string `json:"second_name"`
	Sex        string `json:"sex"`
}

// UserId Идентификатор пользователя
type UserId = string

// N5xx defines model for 5xx.
type N5xx struct {
	// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
	Code int `json:"code"`

	// Message Описание ошибки
	Message string `json:"message"`

	// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
	RequestId string `json:"request_id"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Token string `json:"token"`
}

// RegisterResponse defines model for RegisterResponse.
type RegisterResponse struct {
	UserId string `json:"user_id"`
}

// PostDialogUserIdSendJSONBody defines parameters for PostDialogUserIdSend.
type PostDialogUserIdSendJSONBody struct {
	// Text Текст сообщения
	Text DialogMessageText `json:"text"`
}

// PostLoginJSONBody defines parameters for PostLogin.
type PostLoginJSONBody struct {
	// Id Идентификатор пользователя
	Id       UserId `json:"id"`
	Password string `json:"password"`
}

// PostPostCreateJSONBody defines parameters for PostPostCreate.
type PostPostCreateJSONBody struct {
	// Text Текст поста
	Text PostText `json:"text"`
}

// GetPostFeedParams defines parameters for GetPostFeed.
type GetPostFeedParams struct {
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`
	Limit  *float32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// PutPostUpdateJSONBody defines parameters for PutPostUpdate.
type PutPostUpdateJSONBody struct {
	// Id Идентификатор поста
	Id PostId `json:"id"`

	// Text Текст поста
	Text PostText `json:"text"`
}

// PostUserRegisterJSONBody defines parameters for PostUserRegister.
type PostUserRegisterJSONBody struct {
	Age        int    `json:"age"`
	Biography  string `json:"biography"`
	City       string `json:"city"`
	FirstName  string `json:"first_name"`
	Password   string `json:"password"`
	SecondName string `json:"second_name"`
	Sex        string `json:"sex"`
}

// GetUserSearchParams defines parameters for GetUserSearch.
type GetUserSearchParams struct {
	// FirstName Условие поиска по имени
	FirstName string `form:"first_name" json:"first_name"`

	// LastName Условие поиска по фамилии
	LastName string `form:"last_name" json:"last_name"`
}

// PostDialogUserIdSendJSONRequestBody defines body for PostDialogUserIdSend for application/json ContentType.
type PostDialogUserIdSendJSONRequestBody PostDialogUserIdSendJSONBody

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginJSONRequestBody PostLoginJSONBody

// PostPostCreateJSONRequestBody defines body for PostPostCreate for application/json ContentType.
type PostPostCreateJSONRequestBody PostPostCreateJSONBody

// PutPostUpdateJSONRequestBody defines body for PutPostUpdate for application/json ContentType.
type PutPostUpdateJSONRequestBody PutPostUpdateJSONBody

// PostUserRegisterJSONRequestBody defines body for PostUserRegister for application/json ContentType.
type PostUserRegisterJSONRequestBody PostUserRegisterJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /dialog/{user_id}/list)
	GetDialogUserIdList(c *gin.Context, userId UserId)

	// (POST /dialog/{user_id}/send)
	PostDialogUserIdSend(c *gin.Context, userId UserId)

	// (PUT /friend/delete/{user_id})
	PutFriendDeleteUserId(c *gin.Context, userId UserId)

	// (PUT /friend/set/{user_id})
	PutFriendSetUserId(c *gin.Context, userId UserId)

	// (POST /login)
	PostLogin(c *gin.Context)

	// (POST /post/create)
	PostPostCreate(c *gin.Context)

	// (PUT /post/delete/{id})
	PutPostDeleteId(c *gin.Context, id PostId)

	// (GET /post/feed)
	GetPostFeed(c *gin.Context, params GetPostFeedParams)

	// (GET /post/get/{id})
	GetPostGetId(c *gin.Context, id PostId)

	// (PUT /post/update)
	PutPostUpdate(c *gin.Context)

	// (GET /user/get/{id})
	GetUserGetId(c *gin.Context, id UserId)

	// (POST /user/register)
	PostUserRegister(c *gin.Context)

	// (GET /user/search)
	GetUserSearch(c *gin.Context, params GetUserSearchParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetDialogUserIdList operation middleware
func (siw *ServerInterfaceWrapper) GetDialogUserIdList(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetDialogUserIdList(c, userId)
}

// PostDialogUserIdSend operation middleware
func (siw *ServerInterfaceWrapper) PostDialogUserIdSend(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostDialogUserIdSend(c, userId)
}

// PutFriendDeleteUserId operation middleware
func (siw *ServerInterfaceWrapper) PutFriendDeleteUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutFriendDeleteUserId(c, userId)
}

// PutFriendSetUserId operation middleware
func (siw *ServerInterfaceWrapper) PutFriendSetUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutFriendSetUserId(c, userId)
}

// PostLogin operation middleware
func (siw *ServerInterfaceWrapper) PostLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostLogin(c)
}

// PostPostCreate operation middleware
func (siw *ServerInterfaceWrapper) PostPostCreate(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostPostCreate(c)
}

// PutPostDeleteId operation middleware
func (siw *ServerInterfaceWrapper) PutPostDeleteId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id PostId

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutPostDeleteId(c, id)
}

// GetPostFeed operation middleware
func (siw *ServerInterfaceWrapper) GetPostFeed(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostFeedParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetPostFeed(c, params)
}

// GetPostGetId operation middleware
func (siw *ServerInterfaceWrapper) GetPostGetId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id PostId

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetPostGetId(c, id)
}

// PutPostUpdate operation middleware
func (siw *ServerInterfaceWrapper) PutPostUpdate(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutPostUpdate(c)
}

// GetUserGetId operation middleware
func (siw *ServerInterfaceWrapper) GetUserGetId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id UserId

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetUserGetId(c, id)
}

// PostUserRegister operation middleware
func (siw *ServerInterfaceWrapper) PostUserRegister(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostUserRegister(c)
}

// GetUserSearch operation middleware
func (siw *ServerInterfaceWrapper) GetUserSearch(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserSearchParams

	// ------------- Required query parameter "first_name" -------------

	if paramValue := c.Query("first_name"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument first_name is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "first_name", c.Request.URL.Query(), &params.FirstName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter first_name: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "last_name" -------------

	if paramValue := c.Query("last_name"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument last_name is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "last_name", c.Request.URL.Query(), &params.LastName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter last_name: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetUserSearch(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/dialog/:user_id/list", wrapper.GetDialogUserIdList)

	router.POST(options.BaseURL+"/dialog/:user_id/send", wrapper.PostDialogUserIdSend)

	router.PUT(options.BaseURL+"/friend/delete/:user_id", wrapper.PutFriendDeleteUserId)

	router.PUT(options.BaseURL+"/friend/set/:user_id", wrapper.PutFriendSetUserId)

	router.POST(options.BaseURL+"/login", wrapper.PostLogin)

	router.POST(options.BaseURL+"/post/create", wrapper.PostPostCreate)

	router.PUT(options.BaseURL+"/post/delete/:id", wrapper.PutPostDeleteId)

	router.GET(options.BaseURL+"/post/feed", wrapper.GetPostFeed)

	router.GET(options.BaseURL+"/post/get/:id", wrapper.GetPostGetId)

	router.PUT(options.BaseURL+"/post/update", wrapper.PutPostUpdate)

	router.GET(options.BaseURL+"/user/get/:id", wrapper.GetUserGetId)

	router.POST(options.BaseURL+"/user/register", wrapper.PostUserRegister)

	router.GET(options.BaseURL+"/user/search", wrapper.GetUserSearch)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"YBfsQqlo7Tzc+V8AAAD//0OmKzYCMQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package rest

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// BirthDate Дата рождения
type BirthDate = openapi_types.Date

// DialogMessage defines model for DialogMessage.
type DialogMessage struct {
	// From Идентификатор пользователя
	From UserId `json:"from"`

	// Text Текст сообщения
	Text DialogMessageText `json:"text"`

	// To Идентификатор пользователя
	To UserId `json:"to"`
}

// DialogMessageText Текст сообщения
type DialogMessageText = string

// Post Пост пользователя
type Post struct {
	// AuthorUserId Идентификатор пользователя
	AuthorUserId *UserId `json:"author_user_id,omitempty"`

	// Id Идентификатор поста
	Id *PostId `json:"id,omitempty"`

	// Text Текст поста
	Text *PostText `json:"text,omitempty"`
}

// PostId Идентификатор поста
type PostId = string

// PostText Текст поста
type PostText = string

// User defines model for User.
type User struct {
	// Age Возраст
	Age int `json:"age"`

	// Biography Интересы
	Biography string `json:"biography"`

	// Birthdate Дата рождения
	Birthdate BirthDate `json:"birthdate"`

	// City Город
	City string `json:"city"`

	// FirstName Имя
	FirstName string `json:"first_name"`

	// Id Идентификатор пользователя
	Id UserId `json:"id"`

	// SecondName Фамилия
	SecondName string `json:"second_name"`
}

// UserId Идентификатор пользователя
type UserId = string

// N5xx defines model for 5xx.
type N5xx struct {
	// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
	Code int `json:"code"`

	// Message Описание ошибки
	Message string `json:"message"`

	// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
	RequestId string `json:"request_id"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Token string `json:"token"`
}

// RegisterResponse defines model for RegisterResponse.
type RegisterResponse struct {
	UserId string `json:"user_id"`
}

// PostDialogUserIdSendJSONBody defines parameters for PostDialogUserIdSend.
type PostDialogUserIdSendJSONBody struct {
	// Text Текст сообщения
	Text DialogMessageText `json:"text"`
}

// PostLoginJSONBody defines parameters for PostLogin.
type PostLoginJSONBody struct {
	// Id Идентификатор пользователя
	Id       UserId `json:"id"`
	Password string `json:"password"`
}

// PostPostCreateJSONBody defines parameters for PostPostCreate.
type PostPostCreateJSONBody struct {
	// Text Текст поста
	Text PostText `json:"text"`
}

// GetPostFeedParams defines parameters for GetPostFeed.
type GetPostFeedParams struct {
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`
	Limit  *float32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// PutPostUpdateJSONBody defines parameters for PutPostUpdate.
type PutPostUpdateJSONBody struct {
	// Id Идентификатор поста
	Id PostId `json:"id"`

	// Text Текст поста
	Text PostText `json:"text"`
}

// PostUserRegisterJSONBody defines parameters for PostUserRegister.
type PostUserRegisterJSONBody struct {
	Age        int    `json:"age"`
	Biography  string `json:"biography"`
	City       string `json:"city"`
	FirstName  string `json:"first_name"`
	Password   string `json:"password"`
	SecondName string `json:"second_name"`
	Sex        string `json:"sex"`
}

// GetUserSearchParams defines parameters for GetUserSearch.
type GetUserSearchParams struct {
	// FirstName Условие поиска по имени
	FirstName string `form:"first_name" json:"first_name"`

	// LastName Условие поиска по фамилии
	LastName string `form:"last_name" json:"last_name"`
}

// PostDialogUserIdSendJSONRequestBody defines body for PostDialogUserIdSend for application/json ContentType.
type PostDialogUserIdSendJSONRequestBody PostDialogUserIdSendJSONBody

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginJSONRequestBody PostLoginJSONBody

// PostPostCreateJSONRequestBody defines body for PostPostCreate for application/json ContentType.
type PostPostCreateJSONRequestBody PostPostCreateJSONBody

// PutPostUpdateJSONRequestBody defines body for PutPostUpdate for application/json ContentType.
type PutPostUpdateJSONRequestBody PutPostUpdateJSONBody

// PostUserRegisterJSONRequestBody defines body for PostUserRegister for application/json ContentType.
type PostUserRegisterJSONRequestBody PostUserRegisterJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /dialog/{user_id}/list)
	GetDialogUserIdList(c *gin.Context, userId UserId)

	// (POST /dialog/{user_id}/send)
	PostDialogUserIdSend(c *gin.Context, userId UserId)

	// (PUT /friend/delete/{user_id})
	PutFriendDeleteUserId(c *gin.Context, userId UserId)

	// (PUT /friend/set/{user_id})
	PutFriendSetUserId(c *gin.Context, userId UserId)

	// (POST /login)
	PostLogin(c *gin.Context)

	// (POST /post/create)
	PostPostCreate(c *gin.Context)

	// (PUT /post/delete/{id})
	PutPostDeleteId(c *gin.Context, id PostId)

	// (GET /post/feed)
	GetPostFeed(c *gin.Context, params GetPostFeedParams)

	// (GET /post/get/{id})
	GetPostGetId(c *gin.Context, id PostId)

	// (PUT /post/update)
	PutPostUpdate(c *gin.Context)

	// (GET /user/get/{id})
	GetUserGetId(c *gin.Context, id UserId)

	// (POST /user/register)
	PostUserRegister(c *gin.Context)

	// (GET /user/search)
	GetUserSearch(c *gin.Context, params GetUserSearchParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetDialogUserIdList operation middleware
func (siw *ServerInterfaceWrapper) GetDialogUserIdList(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetDialogUserIdList(c, userId)
}

// PostDialogUserIdSend operation middleware
func (siw *ServerInterfaceWrapper) PostDialogUserIdSend(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostDialogUserIdSend(c, userId)
}

// PutFriendDeleteUserId operation middleware
func (siw *ServerInterfaceWrapper) PutFriendDeleteUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutFriendDeleteUserId(c, userId)
}

// PutFriendSetUserId operation middleware
func (siw *ServerInterfaceWrapper) PutFriendSetUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutFriendSetUserId(c, userId)
}

// PostLogin operation middleware
func (siw *ServerInterfaceWrapper) PostLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostLogin(c)
}

// PostPostCreate operation middleware
func (siw *ServerInterfaceWrapper) PostPostCreate(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostPostCreate(c)
}

// PutPostDeleteId operation middleware
func (siw *ServerInterfaceWrapper) PutPostDeleteId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id PostId

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutPostDeleteId(c, id)
}

// GetPostFeed operation middleware
func (siw *ServerInterfaceWrapper) GetPostFeed(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostFeedParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetPostFeed(c, params)
}

// GetPostGetId operation middleware
func (siw *ServerInterfaceWrapper) GetPostGetId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id PostId

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetPostGetId(c, id)
}

// PutPostUpdate operation middleware
func (siw *ServerInterfaceWrapper) PutPostUpdate(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutPostUpdate(c)
}

// GetUserGetId operation middleware
func (siw *ServerInterfaceWrapper) GetUserGetId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id UserId

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetUserGetId(c, id)
}

// PostUserRegister operation middleware
func (siw *ServerInterfaceWrapper) PostUserRegister(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostUserRegister(c)
}

// GetUserSearch operation middleware
func (siw *ServerInterfaceWrapper) GetUserSearch(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserSearchParams

	// ------------- Required query parameter "first_name" -------------

	if paramValue := c.Query("first_name"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument first_name is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "first_name", c.Request.URL.Query(), &params.FirstName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter first_name: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "last_name" -------------

	if paramValue := c.Query("last_name"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument last_name is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "last_name", c.Request.URL.Query(), &params.LastName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter last_name: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetUserSearch(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/dialog/:user_id/list", wrapper.GetDialogUserIdList)

	router.POST(options.BaseURL+"/dialog/:user_id/send", wrapper.PostDialogUserIdSend)

	router.PUT(options.BaseURL+"/friend/delete/:user_id", wrapper.PutFriendDeleteUserId)

	router.PUT(options.BaseURL+"/friend/set/:user_id", wrapper.PutFriendSetUserId)

	router.POST(options.BaseURL+"/login", wrapper.PostLogin)

	router.POST(options.BaseURL+"/post/create", wrapper.PostPostCreate)

	router.PUT(options.BaseURL+"/post/delete/:id", wrapper.PutPostDeleteId)

	router.GET(options.BaseURL+"/post/feed", wrapper.GetPostFeed)

	router.GET(options.BaseURL+"/post/get/:id", wrapper.GetPostGetId)

	router.PUT(options.BaseURL+"/post/update", wrapper.PutPostUpdate)

	router.GET(options.BaseURL+"/user/get/:id", wrapper.GetUserGetId)

	router.POST(options.BaseURL+"/user/register", wrapper.PostUserRegister)

	router.GET(options.BaseURL+"/user/search", wrapper.GetUserSearch)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
